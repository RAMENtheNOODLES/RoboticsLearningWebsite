// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  Id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  email         String         @unique
  username      String         @unique @default(uuid())
  password      String
  role          Int            @default(0)
  authKey       String         @default("")
  lastLogin     DateTime?
  isLocked      Boolean        @default(false)
  lockExpires   DateTime?
  classes       Classes[]      @relation(name: "class")
  myClasses     Classes[]      @relation(name: "teacher")
  assignments   Assignment[]   @relation(name: "assignment")
  myAssignments Assignment[]   @relation(name: "createdAssignment")
  myGrades      Grade[]        @relation(name: "student_assigned")
  session       Sessions[]     @relation(name: "session")
  loginHistory  LoginHistory[] @relation(name: "login_history")
}

model Classes {
  Id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  teacherId   Int
  teacher     User         @relation(name: "teacher", fields: [teacherId], references: [Id], onDelete: NoAction)
  title       String       @unique
  description String
  users       User[]       @relation(name: "class")
  assignments Assignment[] @relation(name: "assignments")
}

model Assignment {
  Id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  classId             Int
  assigner            Int
  totalPointsPossible Int      @default(0)
  teacher             User     @relation(name: "createdAssignment", fields: [assigner], references: [Id], onUpdate: NoAction)
  students            User[]   @relation(name: "assignment")
  grades              Grade[]  @relation(name: "grade")
  class               Classes  @relation(name: "assignments", fields: [classId], references: [Id])
}

model Grade {
  Id           Int        @id @default(autoincrement())
  assignmentId Int
  pointsEarned Int        @default(0)
  totalPoints  Int        @default(0)
  studentId    Int
  student      User       @relation(name: "student_assigned", fields: [studentId], references: [Id])
  assignment   Assignment @relation(name: "grade", fields: [assignmentId], references: [Id])
}

model Sessions {
  Id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  ipAddress String
  userId    Int
  user      User     @relation(name: "session", fields: [userId], references: [Id])
  token     String   @unique
  expires   DateTime
}

model LoginHistory {
  Id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(name: "login_history", fields: [userId], references: [Id])
  ipAddress String
  numTries  Int
  success   Boolean
}
