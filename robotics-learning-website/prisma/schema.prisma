// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String?   @unique
  emailVerified DateTime?
  name          String?   @map("username")
  image         String?
  password      String?
  role          String?
  lastLogin     DateTime?
  isLocked      Boolean   @default(false)
  lockExpires   DateTime?
  accounts      Account[]
  sessions      Session[]

  Authenticator Authenticator[]

  classes       Classes[]    @relation(name: "class")
  myClasses     Classes[]    @relation(name: "teacher")
  assignments   Assignment[] @relation(name: "assignment")
  myAssignments Assignment[] @relation(name: "createdAssignment")
  myGrades      Grade[]      @relation(name: "student_assigned")
  UserFiles     UserFiles[]
}

model Classes {
  Id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  teacherId   String
  teacher     User         @relation(name: "teacher", fields: [teacherId], references: [id], onDelete: NoAction)
  title       String       @unique
  description String
  users       User[]       @relation(name: "class")
  assignments Assignment[] @relation(name: "assignments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Assignment {
  Id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  classId             Int
  assigner            String
  totalPointsPossible Int      @default(0)
  teacher             User     @relation(name: "createdAssignment", fields: [assigner], references: [id], onUpdate: NoAction)
  students            User[]   @relation(name: "assignment")
  grades              Grade[]  @relation(name: "grade")
  class               Classes  @relation(name: "assignments", fields: [classId], references: [Id])
}

model Grade {
  Id           Int        @id @default(autoincrement())
  assignmentId Int
  pointsEarned Int        @default(0)
  totalPoints  Int        @default(0)
  studentId    String
  student      User       @relation(name: "student_assigned", fields: [studentId], references: [id])
  assignment   Assignment @relation(name: "grade", fields: [assignmentId], references: [Id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum FileLocations {
  USER
  CLASS
  SERVER_SIDE
  TEMP
}

model UserFiles {
  id           Int           @id @default(autoincrement())
  userId       String
  fileName     String        @default(cuid())
  fileLocation FileLocations @default(USER)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
