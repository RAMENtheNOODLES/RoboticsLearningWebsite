info:
  title: "API Documentation"
  version: "0.0.1"
  description: "This is the API documentation for the API."
  contact:
    name: "API Support"
    email: "contact@cookiejar499.me"
components:
    schemas:
      User:
        properties:
          id:
            format: "int64"
          username:
            type: "string"
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
          role:
            type: "string"
          enum:
              - "admin"
              - "user"
          createdAt:
            type: "string"
            format: "date-time"
          updatedAt:
            type: "string"
            format: "date-time"
        UserCreate:
        type: "object"
        required:
            - "username"
            - "email"
            - "password"
            - "role"
        UserUpdate:
        UserLogin:
      UserToken:
        type: "object"
      UserTokenRefresh:
      UserTokenRevoke:
      UserTokenVerify:
        properties:
            message:
            type: "string"
        required:
            - "message"
      UserList:
        type: "array"
        items:
          $ref: "#/components/schemas/User"
      UserCreate:
        type: "object"
        required:
          - "username"
          - "email"
          - "password"
          - "role"
        properties:
          username:
            type: "string"
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
          role:
            type: "string"
            enum:
              - "admin"
              - "user"
      UserUpdate:
        type: "object"
        properties:
          username:
            type: "string"
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
          role:
            type: "string"
            enum:
              - "admin"
              - "user"
      UserLogin:
        type: "object"
        required:
          - "email"
          - "password"
        properties:
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
openapi: "3.1.0"
paths:
    /users:
      get:
        summary: "Get all users"
        description: "Get all users in the database."
        responses:
            "200":
              description: "Successful response"
              content:
                  application/json:
                    schema:
                        $ref: "#/components/schemas/UserList"
        post:
      requestBody:
            required: true
            content:
            application/json:
                schema:
                $ref: "#/components/schemas/UserCreate"
    /users/{id}:
      get:
        summary: "Get a user by ID"
        description: "Get a user by ID from the database."
        parameters:
            - name: "id"
              in: "path"
              required: true
              description: "ID of the user to get"
              schema:
                  type: "integer"
                  format: "int64"
        responses:
            "200":
              description: "Successful response"
              content:
                  application/json:
                    schema:
                        $ref: "#/components/schemas/User"
        put:
        requestBody:
            required: true
            content:
              application/json:
                  schema:
                  $ref: "#/components/schemas/UserUpdate"
      delete:
        summary: "Delete a user by ID"
        description: "Delete a user by ID from the database."
        parameters:
            - name: "id"
              in: "path"
              required: true
              description: "ID of the user to delete"
              schema:
                  type: "integer"
                  format: "int64"
        responses:
            "200":
              description: "User deleted successfully"
              content:
                  application/json:
                  schema:
                  $ref: "#/components/schemas/User"
    /users/login:
        post:
          summary: "Login a user"
          description: "Login a user and get a token."
          requestBody:
              required: true
              content:
                application/json:
                    schema:
                    $ref: "#/components/schemas/UserLogin"
        responses:
            "200":
            description: "User logged in successfully"
            content:
                application/json:
                schema:
                $ref: "#/components/schemas/UserToken"