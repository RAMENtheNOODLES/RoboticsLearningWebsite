info:
  title: "API Documentation"
  version: "0.0.1"
  description: "This is the API documentation for the API."
  contact:
    name: "API Support"
    email: "contact@cookiejar499.me"
components:
    schemas:
      Assignments:
        description: "Array of Assignments"
        type: "array"
        items:
          $ref: "#/components/schemas/Assignment"
      Assignment:
        description: "Assignment"
        properties:
          id:
            type: "integer"
            format: "int64"
          createdAt:
            type: "DateTime"
          classId:
            type: "integer"
            format: "int64"
          assignerId:
            type: "integer"
            format: "int64"
          totalPointsPossible:
            type: "integer"
            format: "int64"
        required:
          - "classId"
          - "assignerId"
          - "totalPointsPossible"
        example:
          id: 1
          createdAt: "2024-05-11T18:45:19.000Z"
          classId: 1
          assignerId: 1
          totalPointsPossible: 100

      User:
        properties:
          id:
            format: "int64"
          username:
            type: "string"
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
          role:
            type: "integer"
            minimum: 0
            maximum: 2
          createdAt:
            type: "string"
            format: "date-time"
          updatedAt:
            type: "string"
            format: "date-time"
        UserCreate:
          type: "object"
          required:
            - "username"
            - "email"
            - "password"
            - "role"
        UserUpdate:
        UserLogin:
      UserToken:
        type: "object"
        properties:
          token:
            type: "string"
        required:
            - "token"
      UserTokenRefresh:
      UserTokenRevoke:
      UserTokenVerify:
        properties:
            message:
            type: "string"
        required:
            - "message"
      UserList:
        type: "array"
        items:
          $ref: "#/components/schemas/User"
      UserCreate:
        type: "object"
        required:
          - "username"
          - "email"
          - "password"
          - "role"
        properties:
          username:
            type: "string"
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
          role:
            type: "integer"
            minimum: 0
            maximum: 2
      UserUpdate:
        type: "object"
        properties:
          username:
            type: "string"
          email:
            type: "string"
            format: "email"
          password:
            type: "string"
          role:
            type: "integer"
            minimum: 0
            maximum: 2
      UserLogin:
        type: "object"
        required:
          - "username"
          - "password"
        properties:
          username:
            type: "string"
          password:
            type: "string"
      Class:
        properties:
          id:
            format: "int64"
            minimum: 1
          name:
            type: "string"
          description:
            type: "string"
          createdAt:
            type: "string"
            format: "date-time"
          updatedAt:
            type: "string"
            format: "date-time"
        ClassCreate:
          type: "object"
          required:
            - "name"
            - "description"
          properties:
            name:
              type: "string"
            description:
              type: "string"
        ClassUpdate:
        ClassList:
          type: "array"
          items:
            $ref: "#/components/schemas/Class"
        ClassDelete:
          type: "object"
          required:
            - "id"
          properties:
            id:
              type: "int64"
              minimum: 1
      ClassList:
        type: "array"
        items:
          $ref: "#/components/schemas/Class"
      ClassCreate:
        type: "object"
        required:
          - "name"
          - "description"
        properties:
          name:
            type: "string"
          description:
            type: "string"
      ClassDelete:
        type: "object"
        required:
          - "id"
        items:
          $ref: "#/components/schemas/Class"
openapi: "3.1.0"
paths:
  /api/assignments/{id}:
    get:
      summary: "Retrieve an assignment by id"
      description: "Retrieves an assignment by id from the database."
      responses:
        200:
          description: "Successfully retrieved an assignment with id: {id}"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
  /api/assignments:
    post:
      summary: "Create a new assignment"
      description: "Create a new assignment in the database"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assignment"
      responses:
        200:
          description: "Successfully created a new assignment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
    get:
      summary: "Get all assignments"
      description: "Get all assignments in the database."
      responses:
        500:
          description: "Could not retrieve assignments from the database"
          content:
            application/text:
              schema:
                type: "string"
                example:
                  "Could not retrieve assignment with id: 100"
        200:
          description: Successfully got all the assignments in the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignments"
  /api/users:
    get:
      summary: "Get all users"
      description: "Get all users in the database."
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
    requestBody:
      required: true
      content:
      application/json:
        schema:
        $ref: "#/components/schemas/UserCreate"
  /api/users/{id}:
    get:
      summary: "Get a user by ID"
      description: "Get a user by ID from the database."
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID of the user to get"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: "Update a user by ID"
      description: "Update a user by ID in the database."
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID of the user to update"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
    delete:
      summary: "Delete a user by ID"
      description: "Delete a user by ID from the database."
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID of the user to delete"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auth-key: "string"
      responses:
        "200":
          description: "User deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /api/users/login:
    post:
      summary: "Login a user"
      description: "Login a user and get a token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: "User logged in successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserToken"
  /api/users/create:
    post:
      summary: "Create a user"
      description: "Create a user and get it's ID."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        500:
          description: "Could not create user."
          content:
            application/text:
              example: "Error creating user."
        200:
          description: "User created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: "integer"
                    format: "int64"
                    example: 1

  /api/classes:
    get:
      summary: "Get all classes"
      description: "Get all classes in the database."
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassList"
    post:
      summary: "Create a class"
      description: "Create a class in the database."
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassCreate"
  /api/classes/{id}:
    delete:
      summary: "Delete a class by ID"
      description: "Delete a class in the database."
      responses:
        200:
          description: "Successful response"
          $ref: "#/components/schemas/ClassDelete"
      parameters:
        - name: id
          description: "ID of the class to delete"
          in: path
          required: true
          content:
            application/json:
              schema:
                type: integer
                minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auth-key: "string"